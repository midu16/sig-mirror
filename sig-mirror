#!/bin/bash

#  Copyright 2018 Pusher Ltd. and Wave Contributors
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# sig-mirror tool
MAINTAINER_EMAIL="midu@redhat.com"

# Variables read from the config.yaml file managed by the user
read_yaml () {
  local yaml_file="$1"

  # Check if the YAML file exists
  if [ ! -f "$yaml_file" ]; then
    echo "Error: YAML file '$yaml_file' not found."
    exit 1
  fi

  # Read variables from YAML file
  export ocp_release_version=$(yq e '.ocp_release_version' "$yaml_file")
  export redhat_operator_index_version=$(yq e '.redhat_operator_index_version' "$yaml_file")
  export release_number=$(yq e '.release_number' "$yaml_file")
  export registry_fqdn=$(yq e '.registry_fqdn' "$yaml_file")
  export registry_port=$(yq e '.registry_port' "$yaml_file")
  export operator_list=($(yq e '.operator_list | join(" ")' "$yaml_file"))
  export signer_email=$(yq e '.signer_email' "$yaml_file")
  export path_signer_public_key=$(yq e '.path_signer_public_key' "$yaml_file")
  export path_signer_private_key=$(yq e '.path_signer_private_key' "$yaml_file")
  export path_signer_passphrase=$(yq e '.path_signer_passphrase' "$yaml_file")
  # Check if required variables are missing
  if [ -z "$ocp_release_version" ] || [ -z "$redhat_operator_index_version" ] || \
     [ -z "$release_number" ] || [ -z "$registry_fqdn" ] || [ -z "$registry_port" ] || \
     [ ${#operator_list[@]} -eq 0 ]; then
    echo "Error: Missing required variables in the YAML file."
    exit 1
  else
    echo "YAML file validation passed."
    return 0
  fi

}

# Making sure that we have all the dependencies alligned with the release and made available
dependencies_checker () {
  local dependencies_directory="${working_directory}/dependencies"
  local MachineConfigDirectory="${working_directory}/mc"
  local SignatureDirectory="$(pwd)/signer"
  # Check if the dependencies directory exists
  if [ ! -d "${dependencies_directory}" ]; then
      # Create the working directory if it doesn't exist
      mkdir -p "${dependencies_directory}"
      mkdir -p "${MachineConfigDirectory}"
      mkdir -p "${SignatureDirectory}"
  fi

  # Public File URLs
  yq_binary_url="https://github.com/mikefarah/yq/releases/download/v4.40.5/yq_linux_arm64.tar.gz"
  cosign_binary_url="https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"

  # Check if yq binary exists, download and extract if not
  if [ ! -f "${dependencies_directory}/yq" ]; then
    # Download and extract yq
    curl -sSL "${yq_binary_url}" -o "${dependencies_directory}/yq_linux_arm64.tar.gz"
    # Untar the downloaded file in the specified directory
    tar -xzvf "${dependencies_directory}/yq_linux_arm64.tar.gz" -C "${dependencies_directory}"
    # Make sure that the yq its executable
    chmod +x "${dependencies_directory}/yq_linux_arm64"
    # Changing the naming
    mv "${dependencies_directory}/yq_linux_arm64" "${dependencies_directory}/yq"
  else
    echo "${dependencies_directory}/yq exists."
  fi
  # Check if cosign binary exists, download and extract if not
  if [ ! -f "${dependencies_directory}/cosign" ]; then
    # Download and extract cosign
    curl -sSL "${cosign_binary_url}" -o "${dependencies_directory}/cosign-linux-amd64"
    # Make sure that the cosign its executable
    chmod +x "${dependencies_directory}/cosign-linux-amd64"
    # Changing the naming
    mv "${dependencies_directory}/cosign-linux-amd64" "${dependencies_directory}/cosign"
  else
    echo "${dependencies_directory}/cosign exists."
  fi
  export PATH="$PATH:$dependencies_directory"
  #echo $PATH #only for debugging
}

# Making sure that we have the dependencies alligned with the release
ocp_dependencies_checker() {
  local dependencies_directory="${working_directory}/dependencies"

  # Check if the dependencies directory exists
  if [ ! -d "$dependencies_directory" ]; then
      # Create the working directory if it doesn't exist
      mkdir -p "$dependencies_directory"
  fi

  # Public File URLs
  oc_mirror_url="${redhat_binary_preparation_url}/${ocp_release_version}/oc-mirror.tar.gz"
  openshift_client_url="${redhat_binary_preparation_url}/${ocp_release_version}/openshift-client-linux-${ocp_release_version}.tar.gz"
  butane_client_url="${redhat_butane_binary_url}/latest/butane"

  # Check if oc-mirror binary exists, download and extract if not
  if [ ! -f "${dependencies_directory}/oc-mirror" ]; then
    # Download and extract oc-mirror
    curl -sSL "${oc_mirror_url}" -o "${dependencies_directory}/oc-mirror.tar.gz"
    # Untar the downloaded file in the specified directory
    tar -xzvf "${dependencies_directory}/oc-mirror.tar.gz" -C "${dependencies_directory}"
    # Make sure that the oc-mirror its executable
    chmod +x "${dependencies_directory}/oc-mirror"
  else
    echo "${dependencies_directory}/oc-mirror exists."
  fi

  # Check if oc binary exists, download and extract if not
  if [ ! -f "${dependencies_directory}/oc" ]; then
    # Download and extract oc-mirror
    curl -sSL "${openshift_client_url}" -o "${dependencies_directory}/openshift-client-linux-$ocp_release_version.tar.gz"
    # Untar the downloaded file in the specified directory
    tar -xzvf "${dependencies_directory}/openshift-client-linux-$ocp_release_version.tar.gz" -C "${dependencies_directory}"
    # Make sure that the oc its executable
    chmod +x "${dependencies_directory}/oc"
  else
    echo "${dependencies_directory}/oc exists."
  fi
  
  # Check if butane binary exists, download and extract if not
  if [ ! -f "${dependencies_directory}/butane" ]; then
    # Download and extract butane
    curl -sSL "${butane_client_url}" -o "${dependencies_directory}/butane"
    # Make sure that the butane its executable
    chmod +x "${dependencies_directory}/butane"
  else
    echo "${dependencies_directory}/butane exists."
  fi

  export PATH="$PATH:$dependencies_directory"
  #echo $PATH #only for debugging
}


# Creating the working directory of the signature
working_dir_generator() {
  # Check if the working directory exists
  if [ ! -d "$working_directory" ]; then
      # Create the working directory if it doesn't exist
      mkdir -p "$working_directory"
  fi
}

get_latest_version() {
  local operator_names=("$@")

  # Generate YAML configuration
  yaml_config="---
apiVersion: mirror.openshift.io/v1alpha2
kind: ImageSetConfiguration
mirror:
  platform:
    channels:
    - name: "${stable_version}"
      minVersion: "${ocp_release_version}"
      maxVersion: "${ocp_release_version}"
      type: ocp
    graph: true
  operators:
    - catalog: \"${redhat_operator_index_catalog}:${redhat_operator_index_version}\"
      targetName: "redhat-operator-index"
      targetTag: "${target_tag}"
      packages:"

  for operator_name in "${operator_names[@]}"; do
    # Extract default channel
    default_channel=$(oc-mirror list operators --catalog "${redhat_operator_index_catalog}:${redhat_operator_index_version}" --package "$operator_name" | awk 'NR==3 {print $NF}')
    # Extract versions (assuming they are the lines after "VERSIONS" header)
    versions=$(oc-mirror list operators --catalog "${redhat_operator_index_catalog}:${redhat_operator_index_version}" --package "$operator_name" --channel=${default_channel} | awk 'NR>1')

    # Remove alphanumeric characters and determine the highest version
    highest_version=$(echo "$versions" | tr -d '[:alpha:]' | sort -Vr | head -n 1)

    # Add back alphanumeric characters to the highest version
    highest_version_with_chars=$(echo "$versions" | grep "$highest_version")

    echo "=============================================="
    echo "Default channel: ${default_channel}"
    echo "=============================================="
    echo "Highest Version for ${operator_name}: ${highest_version_with_chars}"

    # Generate YAML configuration
    yaml_config+="
        - {'name': '$operator_name', 'channels': [{'name': '${default_channel}', 'minVersion': '${highest_version_with_chars}', 'maxVersion': '${highest_version_with_chars}'}]}"
    # echo "$yaml_config" #only for debugging
  done  # Corrected placement of 'done' here

    # Save the YAML configuration to a file
    output_file="imageset-config.yaml"
    echo "$yaml_config" > "${working_directory}/${output_file}"

    echo "=============================================="
    echo "Generated YAML file for ${operator_name}: ${output_file}"
    echo "=============================================="
}

# We will have to mirror the content to a Semy-Offline Cache-Registry
mirroring_to_cache_registry () {
  # Run netcat command and capture the output
  local netcat_output=$(netcat -z -v "${registry_fqdn}" "${registry_port}" 2>&1)
  echo $netcat_output
  # Check if the output includes "succeeded"
  if echo "$netcat_output" | grep -q "succeeded"; then
    echo "Connection succeeded to the Cache-Registry. Proceeding with mirroring."
    # Run oc-mirror command mirror the packages to the Cache-Registry and capture the output
    local mirroring_to_cache_registry_var=$(oc-mirror --config "${working_directory}/imageset-config.yaml" "docker://${registry_fqdn}:${registry_port}/${target_tag,,}" --dest-skip-tls=true)
    # echo ${mirroring_to_cache_registry_var}
    # Check the return code
    if [ $? -eq 0 ]; then
      echo "imageset-config.yaml mirroring is complete."
      local output_mirroring_file="mirroring-oc-mirror.log"
      echo "${mirroring_to_cache_registry_var}" > "${working_directory}/${output_mirroring_file}"
    else
      echo "Error: imageset-config.yaml mirroring failed. Make sure to check the .oc-mirror.log file made available."
    fi
  else
    echo "Error: Connection to the Cache-Registry failed. Exiting with error code."
    exit 1
  fi
}


# Obtaining the singing public key
generate_public_key() {
  local output_file="$(pwd)/signer/signer-key"
  echo "${signer_passphrase}" > "$(pwd)/signer/signer_passphrase"
  # Check if both required arguments are provided
  if [ -z "${signer_email}" ]; then
    echo "Usage: skopeo generate-sigstore-key --output-prefix <output_file> --passphrase-file <signer_passphrase> "
    exit 1
  fi

  # Execute the gpg command to generate the public key
  # skopeo generate-sigstore-key --output-prefix signer-key.pub --passphrase-file passphrase
  (skopeo generate-sigstore-key --output-prefix "${output_file}" --passphrase-file "$(pwd)/signer/signer_passphrase") &
  local process_pid=$!

  wait "$process_pid"
  local exit_code=$?
  # Check the exit code of the gpg command
  if [ $exit_code -eq 0 ]; then
    echo "Public key successfully exported to $output_file"

  else
    echo "Error: Failed to export public key. Check the GPG command or key existence."
    exit 1
  fi
}

# Sign all the container base images mirrored to the Cache-Registry
# Assumption here is that the self-signature its made available before the script is running
signing_images () {
  local ImageListFile=$( cat sig-work-dir/mirroring-oc-mirror.log | grep -oP 'oc-mirror-workspace/results-\d+/mapping.txt' | head -n 1)
  local InternalReleaseDir="${working_directory}/${target_tag,,}"

  # Check if the dependencies directory exists
  if [ ! -d "$InternalReleaseDir" ]; then
      # Create the working directory if it doesn't exist
      mkdir -p "$InternalReleaseDir"
  fi
  # Read the list of images
  while IFS= read -r IMAGE; do
    # Extract image details
    SourceImage=$(echo "$IMAGE" | cut -d'/' -f2-)
    echo $SourceImage >> "${working_directory}/bundle-mirror.log"
    DestImage="docker://${registry_fqdn}:${registry_port}/signed/${SourceImage}"
    
    IMAGE_NAME_DIGEST=$(echo "$IMAGE" | awk -F'/' '{print $NF}')
    echo "==============================================================="
    echo "Signing the operator image and push to Offline-Registry cache:"
    # Perform skopeo copy with signature
    skopeo copy --sign-by-sigstore-private-key "${path_signer_private_key}" --sign-passphrase-file "${path_signer_passphrase}" "docker://${IMAGE}" "${DestImage}" --dest-tls-verify=false --src-tls-verify=false
    # Validate the return code of each image processed.
    if [ $? -eq 0 ]; then
      echo "Image signed and pushed successfully to the Cache-Registry: ${registry_fqdn}:${registry_port} ."
    else
      echo "Error: Failed to sign and push the image: ${IMAGE}."
      exit 1
    fi

    echo "---------------------------------------------------------------"
    echo "Preparing the localhost directory clone:"    
    # Perform skopeo copy to local directory to prepare the bundle.tar.gz
    skopeo copy --format oci "${DestImage}" "dir:${InternalReleaseDir}/${IMAGE_NAME_DIGEST}"
    # Validate the return code of each image processed.
    if [ $? -eq 0 ]; then
      echo "Image copied to local directory successfully."
    else
      echo "Error: Failed to copy the image: ${IMAGE} to the local directory."
      exit 1
    fi

    # skopeo copy "dir:${InternalReleaseDir}/${IMAGE_NAME_DIGEST}" "docker://inbacrnrdl0100.offline.oxtechnix.lan:5000/${target_tag,,}/${IMAGE_NAME_DIGEST}"
    # Print a newline for better readability
    echo
  done < <(cat "${ImageListFile}" | awk -F= '{print $2}')
}

export master_yaml_config="---
apiVersion: machineconfiguration.openshift.io/v1
kind: MachineConfig
metadata:
  labels:
    machineconfiguration.openshift.io/role: master
  name: 80-master-signatures
spec:
  config:
    ignition:
      version: 3.4.0
    storage:
      files:"
export worker_yaml_config="---
apiVersion: machineconfiguration.openshift.io/v1
kind: MachineConfig
metadata:
  labels:
    machineconfiguration.openshift.io/role: worker
  name: 80-worker-signatures
spec:
  config:
    ignition:
      version: 3.4.0
    storage:
      files:"

# templating the signer-key.pub
template_machineconfig() {

  # Check if all required are provided
  if [ -e "${path_signer_public_key}" ] && [ -s "${path_signer_public_key}" ]; then
    local signature_base64=$(base64 -w 0 "${path_signer_public_key}")
    cat <<EOF > "${working_directory}/mc/01-master-signer-pub-key-machine-config.yaml"
apiVersion: machineconfiguration.openshift.io/v1
kind: MachineConfig
metadata:
  labels:
    machineconfiguration.openshift.io/role: master
  name: 01-master-signer-pub-key
spec:
  config:
    ignition:
      version: 3.4.0
    storage:
      files:
      - contents:
          source: data:text/plain;charset=utf-8;base64,${signature_base64}
        mode: 420
        overwrite: true
        path: /etc/pki/rpm-gpg/signer-key.pub
EOF
    cat <<EOF > "${working_directory}/mc/01-worker-signer-pub-key-machine-config.yaml"
apiVersion: machineconfiguration.openshift.io/v1
kind: MachineConfig
metadata:
  labels:
    machineconfiguration.openshift.io/role: worker
  name: 01-worker-signer-pub-key
spec:
  config:
    ignition:
      version: 3.4.0
    storage:
      files:
      - contents:
          source: data:text/plain;charset=utf-8;base64,${signature_base64}
        mode: 420
        overwrite: true
        path: /etc/pki/rpm-gpg/signer-key.pub
EOF
  else
    echo "File: ${path_signer_public_key} does not exist or is empty."
    exit 1
  fi


}

# https://docs.openshift.com/container-platform/4.14/security/container_security/security-container-signature.html
#Expanding the 51-<node>-rh-registry-trust MachineConfig to cover the OfflineRegistry

# Function to check if the process is running
is_process_running() {
  local process_name="$1"
  pgrep -f "$process_name" > /dev/null
}

release_bundle () {
  #Creating the release bundle packing everything for air-gap environment availability

  local files_and_dirs=(
    "config.yaml"
    "oc-mirror-workspace"
    "README.md"
    "sig-work-dir"
  )

  # Get the current date in the format YYMMDD
  date_string=$(date +"%y%m%d")
  local timeout_seconds=1800  # 30 minutes
  local start_time=$(date +%s)

  # Define the archive file name with the date
  archive_name="${target_tag,,}.tar.gz"
  local BundleCreationLogs="${archive_name}-bundle-creation.log"
  echo "==============================================================="
  echo "Preparing ${archive_name}."
  # Create the tar.gz archive
  # Use tar to create the archive
  # Start the process in the background
  (tar -I pigz -cvf "${archive_name}" "${files_and_dirs[@]}" > "$(pwd)/${BundleCreationLogs}" 2>&1) &
  local process_pid=$!
  local elapsed_time=0

  echo -n "Preparing ${archive_name}."
  echo -n "Loading."

  while kill -0 "$process_pid" 2> /dev/null; do
    if [ $elapsed_time -gt $timeout_seconds ]; then
      echo ""
      echo "Error: Timeout exceeded. Process took more than 30 minutes."
      exit 1
    fi

    echo -n "."
    sleep 10
    elapsed_time=$(( $(date +%s) - start_time ))
  done
  # echo -n "${elapsed_time}" just for debugging 
  wait "$process_pid"
  local exit_code=$?
  echo ""
  echo "${exit_code}"
  if [ $exit_code -eq 0 ]; then
    echo ""
    echo "Completed!"
    echo "Internal bundle release created: $(pwd)/${archive_name}"
  else
    echo ""
    echo "Internal bundle release creation failed. Please check logs: $(pwd)/${BundleCreationLogs}"
    exit 1
  fi

  echo
  echo "==============================================================="
  # Once the bundle release has been created, make sure that it gets sign
  # gpg --detach-sign --local-user midu@redhat.com --output 24r4-ocp-4.14.9-someone.24.01.27.tar.gz.sign ./24r4-ocp-4.14.9-someone.24.01.27.tar.gz
  # local BundleSign=$(gpg --detach-sign --local-user "${signer_email}" --output "$(pwd)/${archive_name}.sign" "$(pwd)/${archive_name}")
  local BundleCreationSignLogs="${archive_name}-bundle-sign-creation.log"
  (gpg --detach-sign -a --output "$(pwd)/${archive_name}.sign" "$(pwd)/${archive_name}" > "$(pwd)/${BundleCreationSignLogs}" 2>&1) &
  local process_pid=$!

  echo "Preparing ${archive_name}.sign."
  echo -n "Loading."
  while kill -0 "$process_pid" 2> /dev/null; do
    echo -n "."
    sleep 10
  done
  # echo -n "${elapsed_time}" just for debugging 
  wait "$process_pid"
  local exit_code=$?
  echo ""
  echo "${exit_code}"
  if [ $exit_code -eq 0 ]; then
    echo "Completed!"
    echo "Internal bundle release signature created: $(pwd)/${archive_name}.sign"
  else
    echo "Internal bundle release creationg failed. Please check logs: $(pwd)/${BundleCreationSignLogs}"
    exit 1
  fi
}

# Define a clean-up function 
#This is intended to perform a cleanup of all the artefactory on the hoast only after specific input from administrator

# OS Distribution validation
# Function to get the operating system distribution
get_os_distribution () {
  if [ -e /etc/os-release ]; then
    # Source the os-release file
    . /etc/os-release
    if [ -n "$ID" ]; then
      echo "$ID"
    else
      echo "Unknown"
    fi
  else
    echo "Unknown"
  fi
}

# Function to validate the operating system distribution
validate_os_distribution () {
  local supported_distributions=("centos" "rhel" "fedora")

  local os_distribution=$(get_os_distribution | tr '[:upper:]' '[:lower:]')

  if [[ " ${supported_distributions[@]} " =~ " $os_distribution " ]]; then
    echo "Supported operating system: $os_distribution"
    return 0
  else
    echo "Unsupported operating system: $os_distribution"
    return 1
  fi
}

# As pre-main I would like to make sure that all the root system user dependencies are made available to my
#root-less priviledged user
#
# Function to check if a command is available
command_exists () {
  command -v "$1" >/dev/null 2>&1
}

# Function to validate dependencies
validate_dependencies() {
  local dependencies=("skopeo" "gpg")

  for dependency in "${dependencies[@]}"; do
    if ! command_exists "$dependency"; then
      echo "Error: $dependency is not installed. Please install it before proceeding."
      return 1
    fi
  done

  return 0
}

# Function to display the help menu
display_help() {
  echo "Usage: $0 [OPTION]"
  echo "sig-mirror Interactive CLI Interface"
  echo ""
  echo "Options:"
  echo "  -h, --help      Display this help menu"
  echo "  -a, --dependency-check  Perform an dependency check of your environment. Make sure that binary dependencies are made available."
  echo "  -b, --air-gap-bundle    Perform an Air-Gap Bundle Release Creation."
  echo "  -c, --air-gap-mirror    Perform an Air-Gap Bundle Release Mirror to Offline Registry.TBD"
}
#
## Interactive CLI interface
echo "Interactive CLI Interface"
echo "=========================="

while true; do
  read -p "Enter an option (h for help, q to quit): " user_input

  case $user_input in
    h|--help)
      display_help
      ;;
    a|--dependency-check)
      echo "Perform an dependency check of your environment"
      validate_os_distribution
      if [ $? -eq 0 ]; then
        echo "Operating system validation passed."
        validate_dependencies
        if [ $? -eq 0 ]; then
          echo "All dependencies are installed."
          # Variable that defines the signature-working-directory
          working_directory="$(pwd)/sig-work-dir"
          dependencies_checker
          read_yaml "config.yaml"
        else
          echo "Dependency validation failed."
        fi
        else
          echo "Operating system validation failed."
      fi
      ;;
    b|--air-gap-bundle)
      echo "Perform an Air-Gap Bundle Release Creation."
      validate_os_distribution
      if [ $? -eq 0 ]; then
        echo "Operating system validation passed."
        validate_dependencies
        if [ $? -eq 0 ]; then
          echo "All dependencies are installed."
          # Variable that defines the signature-working-directory
          working_directory="$(pwd)/sig-work-dir"
          dependencies_checker
          read_yaml "config.yaml"
          # Defining the static Variables
          original_string="${release_number}-ocp-${ocp_release_version}-someone"
          # Variables that will be encoded
          redhat_operator_index_catalog='registry.redhat.io/redhat/redhat-operator-index'
          redhat_binary_preparation_url='https://mirror.openshift.com/pub/openshift-v4/clients/ocp'
          redhat_butane_binary_url='https://mirror.openshift.com/pub/openshift-v4/clients/butane'
          # Get the current date in the format YY.MM.DD
          date_string=$(date +"%y.%m.%d")
          # Append the date string
          target_tag="${original_string}.${date_string}"
          # Extract major and minor versions
          major_version=$(echo "$ocp_release_version" | cut -d. -f1)
          minor_version=$(echo "$ocp_release_version" | cut -d. -f2)
          # Construct 'stable' version
          stable_version="stable-$major_version.$minor_version"
          ################################################################################
          ocp_dependencies_checker
          working_dir_generator
          get_latest_version "${operator_list[@]}"
          mirroring_to_cache_registry
          template_machineconfig
          signing_images
          release_bundle
        else
          echo "Dependency validation failed."
        fi
        else
          echo "Operating system validation failed."
      fi
      ;;
    q|quit)
      echo "Exiting..."
      break
      ;;
    *)
      echo "Invalid option. Type 'h' for help."
      ;;
  esac
done
